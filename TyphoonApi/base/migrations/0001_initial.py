# Generated by Django 2.0.4 on 2018-09-24 00:35

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(auto_created=True, db_index=True, default=uuid.uuid4, editable=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=32, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='last name')),
                ('mina_openid', models.CharField(db_index=True, default=None, max_length=32, null=True)),
                ('mp_openid', models.CharField(db_index=True, default=None, max_length=32, null=True)),
                ('union_id', models.CharField(db_index=True, default=None, max_length=32, null=True)),
                ('nick_name', models.CharField(default=None, max_length=128, null=True)),
                ('phone_number', models.CharField(db_index=True, default=None, max_length=20, null=True)),
                ('state', models.PositiveSmallIntegerField(default=0)),
                ('avatar_url', models.URLField(default=None, null=True)),
                ('is_subscribed', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('uuid', models.UUIDField(auto_created=True, db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='info', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('sex', models.PositiveSmallIntegerField(null=True)),
                ('city', models.CharField(max_length=20, null=True)),
                ('subscribe_at', models.PositiveIntegerField(null=True)),
                ('unsubscribe_at', models.PositiveIntegerField(null=True)),
            ],
            options={
                'db_table': 'user_info',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
